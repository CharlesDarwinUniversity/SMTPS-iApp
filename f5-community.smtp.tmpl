cli admin-partitions {
  update-partition Common
}
sys application template /Common/f5-community.smtp {
  actions {
    definition {
      html-help {
      }
      implementation {
        tmsh::include "f5.app_utils"

tmsh::log_dest file
tmsh::log_level crit

# constants
set NO_ANSWER "No"
set YES_ANSWER "Yes"
set EMPTY_STRING "EMPTY_STRING_NO_VALUE_PRESENT"
set CREATE_NEW_PROFILE_OPTION "Create New Profile"
set CREATE_NEW_POOL_OPTION "Create New Pool"
set CREATE_NEW_MONITOR_OPTION "Create New Monitor"
set WAN_OPTION "WAN"
set ADDR_FIELD "addr"
set PORT_FIELD "port"
set RATIO_FIELD "ratio"
set RULE_FIELD "rule"
set HOST_FIELD "host"
set ONE_SPACE " "
set CONNECTION_LIMIT_FIELD "connection_limit"

proc tmsh_create { component arguments } {
  regsub -all {\"} $arguments "\\\"" arguments
  regsub -all {\[} $arguments "\\\[" arguments
  regsub -all {\]} $arguments "\\\]" arguments
  regsub -all {\$} $arguments "\\\$" arguments
  tmsh::run_proc f5.app_utils:do_tmsh_create "\"$component\"" "\"$arguments\""
}

proc tmsh_modify { component arguments } {
  regsub -all {\"} $arguments "\\\"" arguments
  regsub -all {\[} $arguments "\\\[" arguments
  regsub -all {\]} $arguments "\\\]" arguments
  regsub -all {\$} $arguments "\\\$" arguments
  tmsh::run_proc f5.app_utils:do_tmsh_modify "\"$component\"" "\"$arguments\""
}

proc create_monitor_smtp_script { } {
  set mon_script_name /config/monitors/${tmsh::app_name}_monitor_smtp
  set fn [open "$mon_script_name" "w" "0755"]
  puts $fn "expect 220"
  puts $fn "send \"HELO ${::monitor_questions__mail_domain}\\r\\n\""
  puts $fn "expect \"250\""
  puts $fn "send \"MAIL FROM: ${::monitor_questions__mail_from}\\r\\n\""
  puts $fn "expect \"250\""
  puts $fn "send \"RCPT TO: ${::monitor_questions__mail_to}\\r\\n\""
  puts $fn "expect \"250\""
  puts $fn "send \"DATA\\r\\n\""
  puts $fn "expect \"354\""
  puts $fn "send \"SUBJECT:F5 LTM SMTP Health Check\\r\\n\""
  puts $fn "send \"\\r\\n\""
  puts $fn "send \"This e-mail is generated by the SMTP health check by the F5 LTM.\\r\\n\""
  puts $fn "send \".\\r\\n\""
  puts $fn "expect \"250\""
  puts $fn "send \"quit\\r\\n\""
  puts $fn "expect \"221\""
  close $fn
  return $mon_script_name
}

proc create_starttls_irule { } {
  set irule_name [format "%s_%s" $tmsh::app_name starttls_iRule]
  set    starttls_irule "when CLIENT_ACCEPTED \{\n"
  append starttls_irule "  set ehlo 0\n"
  append starttls_irule "  SSL::disable\n"
  append starttls_irule "\}\n"
  append starttls_irule "when SERVER_CONNECTED \{\n"
  append starttls_irule "  TCP::collect\n"
  append starttls_irule "\}\n"
  append starttls_irule "when CLIENT_DATA \{\n"
  append starttls_irule "  set lcpayload \[string tolower \[TCP::payload\]\]\n"
  append starttls_irule "  if \{ \$lcpayload starts_with \"ehlo\" \} \{\n"
  append starttls_irule "    set ehlo 1\n"
  append starttls_irule "    serverside \{ TCP::collect \}\n"
  append starttls_irule "    TCP::release\n"
  append starttls_irule "    TCP::collect\n"
  append starttls_irule "  \} elseif \{ \$lcpayload starts_with \"starttls\" \} \{\n"
  append starttls_irule "    TCP::respond \"220 Ready to start TLS\\\\r\\\\n\"\n"
  append starttls_irule "    TCP::payload replace 0 \[TCP::payload length\] \"\"\n"
  append starttls_irule "    TCP::release\n"
  append starttls_irule "    SSL::enable\n"
  append starttls_irule "  \} else \{\n"
  append starttls_irule "    TCP::release\n"
  append starttls_irule "  \}\n"
  append starttls_irule "\}\n"
  append starttls_irule "when SERVER_DATA \{\n"
  append starttls_irule "  if \{ \$ehlo == 1 and not(\[string tolower \[TCP::payload\]\] contains \"starttls\") \} \{\n"
  append starttls_irule "    TCP::payload replace 0 0 \"250-STARTTLS\\\\r\\\\n\"\n"
  append starttls_irule "  \}\n"
  append starttls_irule "  TCP::release\n"
  append starttls_irule "  clientside \{ TCP::collect \}\n"
  append starttls_irule "\}\n"
  tmsh_create "ltm rule" "$irule_name $starttls_irule"

  return $irule_name
}

proc collect_irules { rules } {
  set irule_names ""
  if { $rules != "" } {
    set element_list [split $rules]
    for {set i 0} {$i < [llength $element_list]} {incr i} {
      set element [lindex $element_list $i] 
      if { $element == $::RULE_FIELD } {
        set i [incr i]
        set rule_name [lindex $element_list $i]
        if { $rule_name != "<none>" } {
          append irule_names $::ONE_SPACE
          append irule_names $rule_name
        }
      }
    }
  }

  if { $irule_names == "" } {
    set irule_names $::EMPTY_STRING
  }

  return $irule_names
}

proc create_smtp_monitor { } {
  # create monitor
  if { $::monitor_questions__create_new_monitor == $::CREATE_NEW_MONITOR_OPTION} {
    set script_name [create_monitor_smtp_script]
    
    set monitor_interval $::monitor_questions__monitor_interval
    set monitor_timeout 16
    set monitor_type scripted
    set monitor_name [format "%s_%s_monitor" $tmsh::app_name $monitor_type]
    tmsh_create "ltm monitor $monitor_type" "$monitor_name interval $monitor_interval timeout $monitor_timeout filename $script_name"
  } else {
    set monitor_name [list [join $::monitor_questions__reuse_monitor_name " and "]]
  }
  return $monitor_name
}

proc create_smtp_pool { monitor_name } {

  if { $::server_pools__create_new_pool == $::CREATE_NEW_POOL_OPTION } {
    set servers $::server_pools__servers
    set lb_method $::server_pools__lb_method_choice
    set pool_name [tmsh::run_proc f5.app_utils:create_pool $tmsh::app_name $monitor_name "\{$servers\}" $lb_method ]
    if { $::monitor_questions__create_new_monitor == $::CREATE_NEW_MONITOR_OPTION} {
      if { $::monitor_questions__tcp_monitor == $::YES_ANSWER } {
        set monitor_interval $::monitor_questions__tcp_monitor_interval
        set monitor_timeout 16
        set monitor_type tcp
        set monitor_name2 [format "%s_%s_monitor" $tmsh::app_name $monitor_type]
        tmsh_create "ltm monitor tcp" "$monitor_name2 defaults-from tcp interval $monitor_interval timeout $monitor_timeout"
        set second_monitor $monitor_name2
        set monitor_names "min 1 of \{ $monitor_name $second_monitor \}"
        tmsh_modify "/ ltm pool" "$pool_name monitor $monitor_name and $second_monitor"
        tmsh_modify "/ ltm pool" "$pool_name monitor $monitor_names"
      }
    }
  } else {
    set pool_name $::server_pools__reuse_pool_name
  }
  return $pool_name
}

proc configure_smtp_deployment { } {

  set monitor_name [create_smtp_monitor]

  set pool_name [create_smtp_pool $monitor_name]

  # Create TCP profiles
  set tcp_profile_name_lan [format "%s_%s" $tmsh::app_name lan-optimized_tcp_profile]
  tmsh_create "ltm profile tcp" "$tcp_profile_name_lan defaults-from tcp-lan-optimized"

  set tcp_server_profile_name $tcp_profile_name_lan
  if { $::optimizations__lan_or_wan == $::WAN_OPTION } {
    set tcp_profile_name_wan [format "%s_%s" $tmsh::app_name wan-optimized_tcp_profile]
    tmsh_create "ltm profile tcp" "$tcp_profile_name_wan defaults-from tcp-wan-optimized"

    set tcp_client_profile_name $tcp_profile_name_wan
  } else {
    set tcp_client_profile_name $tcp_profile_name_lan
  }

  # Create VSs
  if { $::basic__snat == $::NO_ANSWER } {
    set snataction "snat automap"
    if { $::basic__need_snatpool == $::YES_ANSWER } {
      set members \{
      foreach member $::basic__snatpool_members {
        append members [tmsh::get_field_value $member addr]
        append members $::ONE_SPACE
      }
      append members \}

      set snatpool_name [format "%s_snatpool" $tmsh::app_name ]
      tmsh_create "/ ltm snatpool" "$snatpool_name members replace-all-with $members"
      set snataction "snatpool $snatpool_name"
    }
  } else {
    set snataction "snat none"
  }

  set mask_action "mask 255.255.255.255"
  
  # Initialise SSL requirements
  if { $::ssl_encryption_questions__offload_ssl == $::YES_ANSWER } {
  
    # Determine SSL profile
    if { $::ssl_encryption_questions__create_new_profile == $::CREATE_NEW_PROFILE_OPTION } {
      set key $::ssl_encryption_questions__key
      set cert $::ssl_encryption_questions__cert
      set chain_cert $::ssl_encryption_questions__chain_cert
      set client_ssl_profile_name [tmsh::run_proc f5.app_utils:create_ssl_profile $tmsh::app_name $key $cert]
      tmsh_modify "/ ltm profile client-ssl" "$client_ssl_profile_name chain $chain_cert"
    } else {
      set client_ssl_profile_name $::ssl_encryption_questions__ssl_profile_name
    }
  
    # Create STARTTLS iRule
    set starttls_irule_name [create_starttls_irule]
  }

  set irule_names [collect_irules $::basic__irules]
  
  if { $::ssl_encryption_questions__offload_ssl != $::YES_ANSWER || $::ssl_encryption_questions__permit_smtp == $::YES_ANSWER } {
  
    # Create SMTP VS
    set destination [tmsh::run_proc f5.app_utils:create_destination $::basic__addr 25]
    set vs_name [format "%s_%s" $tmsh::app_name smtp_vs]
    
    tmsh_create "ltm virtual" "$vs_name destination $destination $snataction $mask_action pool $pool_name ip-protocol tcp"

    if { $tcp_server_profile_name == $tcp_client_profile_name } {
      tmsh_modify "/ ltm virtual" "$vs_name profiles add \{ $tcp_server_profile_name \{ context all \} \}"
    }
    else {
      tmsh_modify "/ ltm virtual" "$vs_name profiles add \{ $tcp_server_profile_name \{ context serverside \} \}"
      tmsh_modify "/ ltm virtual" "$vs_name profiles add \{ $tcp_client_profile_name \{ context clientside \} \}"
    }
    
    if { $irule_names != $::EMPTY_STRING } {
        tmsh_modify "/ ltm virtual" "$vs_name rules \{ $irule_names \}"
    }
    
  }
  
  if { $::ssl_encryption_questions__offload_ssl == $::YES_ANSWER } {
  
    # Create SMTP STARTTLS VS
    set destination [tmsh::run_proc f5.app_utils:create_destination $::basic__addr 587]
    set vs_name [format "%s_%s" $tmsh::app_name smtp_starttls_vs]
    
    tmsh_create "ltm virtual" "$vs_name destination $destination $snataction $mask_action pool $pool_name ip-protocol tcp"

    if { $tcp_server_profile_name == $tcp_client_profile_name } {
      tmsh_modify "/ ltm virtual" "$vs_name profiles add \{ $tcp_server_profile_name \{ context all \} \}"
    }
    else {
      tmsh_modify "/ ltm virtual" "$vs_name profiles add \{ $tcp_server_profile_name \{ context serverside \} \}"
      tmsh_modify "/ ltm virtual" "$vs_name profiles add \{ $tcp_client_profile_name \{ context clientside \} \}"
    }
    
    tmsh_modify "/ ltm virtual" "$vs_name profiles add \{ $client_ssl_profile_name \{ context clientside \} \}"
    
    set smtp_vs_irule_names $starttls_irule_name
    if { $irule_names != $::EMPTY_STRING } {
      append smtp_vs_irule_names $::ONE_SPACE
      append smtp_vs_irule_names $irule_names
    }
    tmsh_modify "/ ltm virtual" "$vs_name rules \{ $smtp_vs_irule_names \}"
  
    # Create SMTPS VS
    set destination [tmsh::run_proc f5.app_utils:create_destination $::basic__addr 465]
    set vs_name [format "%s_%s" $tmsh::app_name smtps_vs]
    tmsh_create "ltm virtual" "$vs_name destination $destination $snataction $mask_action pool $pool_name ip-protocol tcp"

    if { $tcp_server_profile_name == $tcp_client_profile_name } {
      tmsh_modify "/ ltm virtual" "$vs_name profiles add \{ $tcp_server_profile_name \{ context all \} \}"
    }
    else {
      tmsh_modify "/ ltm virtual" "$vs_name profiles add \{ $tcp_server_profile_name \{ context serverside \} \}"
      tmsh_modify "/ ltm virtual" "$vs_name profiles add \{ $tcp_client_profile_name \{ context clientside \} \}"
    }
        
    tmsh_modify "/ ltm virtual" "$vs_name profiles add \{ $client_ssl_profile_name \{ context clientside \} \}"

    if { $irule_names != $::EMPTY_STRING } {
        tmsh_modify "/ ltm virtual" "$vs_name rules \{ $irule_names \}"
    }
  }
}

puts " "
puts "Starting SMTP Template..."
puts " "

if { [tmsh::run_proc f5.app_utils:is_safe_app_name "\"$tmsh::app_name\""] != true } {
  puts "The app template name contained illegal characters."
  error "The app template name contained illegal characters."
}

configure_smtp_deployment

puts " "
puts "Finished SMTP Template..."
puts " "
      }
      presentation {
        include "/Common/f5.apl_common"

section intro {
  message hello "SMTP for Exchange."
  optional ( hello == "NEVER_SHOW_THIS" ) {
    choice ltm_provisioned tcl { tmsh::run_proc f5.app_utils:get_provisioned ltm }
    choice is_viprion tcl { tmsh::run_proc f5.app_utils:get_is_viprion }
  }

  optional ( ltm_provisioned != "provisioned" ) {
    message sorry "We are sorry but you must license and provision the LTM module to use this template."
  }
}

section basic {
  string addr required validator "IpAddress"
  noyes snat
  optional ( snat == "No" ) {
    noyes need_snatpool
    optional ( need_snatpool == "Yes" ) {
      table snatpool_members {
        string addr required validator "IpAddress"
      }
    }
  }
  noyes attach_irules
  optional ( attach_irules == "Yes" ) {
    table irules {
      choice rule default "<none>" display "xlarge" tcl {     
        set rules_list "<none>\n"
        append rules_list [tmsh::run_proc f5.app_utils:get_items ltm rule]
        return $rules_list
      }
    }
  }
}

section server_pools {
  choice create_new_pool default "Create New Pool" display "large" {
    "Create New Pool" => "Create New Pool",
    "Use Pool..." => "Use Pool..."
  }
  optional ( create_new_pool == "Create New Pool" ) {
    lb_method lb_method_choice

    table servers {
      string addr required validator "IpAddress"
      string port default "25" required validator "PortNumber" display "small"
      string connection_limit default "0" required validator "NonNegativeNumber" display "small"
      optional ( lb_method_choice == "ratio-member" ||
          lb_method_choice == "ratio-node" ||
          lb_method_choice == "ratio-session" ||
          lb_method_choice == "ratio-least-connections-member" ||
          lb_method_choice == "ratio-least-connections-node" ||
          lb_method_choice == "dynamic-ratio-member" ||
          lb_method_choice == "dynamic-ratio-node" ) {
        string ratio default "1" validator "NonNegativeNumber" display "small"
      }
    }
  }

  optional ( create_new_pool == "Use Pool..." ) {
    choice reuse_pool_name display "xlarge" tcl {
      tmsh::run_proc f5.app_utils:get_items ltm pool
    }
  }
}

section ssl_encryption_questions {
    noyes offload_ssl
    optional ( offload_ssl == "Yes" ) {
        yesno permit_smtp
        choice create_new_profile display "xlarge" {
            "Create New Profile",
            "Use Profile..."
        }
        message about_ssl_profiles "The Client SSL profile enables the BIG-IP system to accept and terminate client requests that are sent using SSL, and contains certificate and key information. The template creates a simple Client SSL profile using the certificate and key you select below. Creating advanced Client SSL profiles is not a part of this template. If you require advanced options on the Client SSL profile, create a new Client SSL profile, restart or reconfigure this template, and select the profile from the list."
        optional ( create_new_profile == "Use Profile..." ) {
            choice ssl_profile_name default "/Common/clientssl" display "xlarge" tcl {
                tmsh::run_proc f5.app_utils:get_items / ltm profile client-ssl
            }
        }
        optional ( create_new_profile == "Create New Profile" ) {
            choice cert  default "/Common/default.crt" display "large"  tcl { tmsh::run_proc f5.app_utils:get_ssl_certs }
            choice key   default "/Common/default.key" display "large"  tcl { tmsh::run_proc f5.app_utils:get_ssl_keys  }
            choice chain_cert default "None" display "xlarge" tcl { 
                set results "None\n"
                append results [tmsh::run_proc f5.app_utils:get_ssl_certs]
                return $results
            } 
        } 
    }
}

section optimizations {
  choice lan_or_wan default "WAN" {
    "WAN" => "WAN",
    "LAN" => "LAN"
  }
}

section monitor_questions {
  choice create_new_monitor display "xlarge" {
        "Create New Monitor",
        "Use Monitor..."
      }
  optional ( create_new_monitor == "Create New Monitor" ) {
        string monitor_interval default "15" required validator "NonNegativeNumber" display "small"
        string mail_domain required display "large"
        string mail_to required display "large"
        string mail_from required display "large"
        noyes tcp_monitor
        optional ( tcp_monitor == "Yes" ) {
          string tcp_monitor_interval default "5" required validator "NonNegativeNumber" display "small"
        }
      }
  optional ( create_new_monitor == "Use Monitor..." ) {
        multichoice reuse_monitor_name display "xlarge" tcl {
          tmsh::run_proc f5.app_utils:get_ltm_monitors_filter smtp tcp
        }
      }
}

section postreq {
  message troubleshooting "See the Help tab or the Deployment Guide for help troubleshooting."
}

text {
  intro "Welcome to the SMTP template"
  intro.hello "Introduction"

  basic "Virtual Server Questions"
  basic.addr "What IP address do you want to use for this virtual server?"
  basic.snat "Do the SMTP servers have a route back to application clients via this BIG-IP system?"
  basic.need_snatpool "Will you have more than 64,000 connections at one time? If so, you will need to enter at least one IP address for each 64,000 connections. "
  basic.snatpool_members "Enter IP addresses that can be used for a SNAT pool. Enter one IP address for each 64,000 connections "
  basic.snatpool_members.addr "Address: "
  basic.attach_irules "Do you want to attach iRules to this virtual server?"

  server_pools "Server Pool, Load Balancing, and Service Monitor Questions"
  server_pools.create_new_pool "Do you want to create a new pool or use an existing one?"
  server_pools.lb_method_choice "Which load balancing method do you want to use?"
  server_pools.servers "Which servers do you want this virtual server to reference? (The virtual server will not be available until at least one server is added.)"
  server_pools.servers.addr "Address"
  server_pools.servers.port "Port"
  server_pools.servers.ratio "Ratio"
  server_pools.servers.connection_limit "Connection Limit"
  server_pools.reuse_pool_name "Choose a pool from the list of available pools."
  
  ssl_encryption_questions "SSL Encryption Questions"
  ssl_encryption_questions.offload_ssl "Do you want the BIG-IP system to offload SSL processing from the SMTP servers?"
  ssl_encryption_questions.permit_smtp "Do you also want to permit regular SMTP as well as SMTPS?"
  ssl_encryption_questions.about_ssl_profiles "About Client SSL profiles"
  ssl_encryption_questions.create_new_profile "Do you want to create a new Client SSL profile or use an existing one?"
  ssl_encryption_questions.cert "Which certificate do you want the BIG-IP system to use to authenticate the server? (You may need to import a certificate before deploying this template.)"
  ssl_encryption_questions.key "Which key do you want the BIG-IP system to use for encryption? (You may need to import a key before deploying this template.)"
  ssl_encryption_questions.chain_cert "If the certificate identified above does not directly reference a certificate authority, choose the relevant chain certificate from the list of available SSL certificates. (You may need to import a certificate before deploying this template.)"
  ssl_encryption_questions.ssl_profile_name "Choose a profile from the list of available Client SSL profiles."

  optimizations "Protocol Optimization Questions"
  optimizations.lan_or_wan "Will clients be connecting to this virtual server primarily over a LAN or a WAN?"

  monitor_questions "Monitor Questions"
  monitor_questions.create_new_monitor "Do you want to create a new SMTP health monitor or use an existing one?"
  monitor_questions.monitor_interval "How often (in seconds) do you want the BIG-IP system to attempt to send a test mail to each SMTP server?"
  monitor_questions.mail_domain "What domain should be sent in the HELO to the SMTP server?"
  monitor_questions.mail_to "Specify a To email address:"
  monitor_questions.mail_from "Specify a From email address:"
  monitor_questions.tcp_monitor "Enable a tcp monitor on your pool members."
  monitor_questions.tcp_monitor_interval "How often (in seconds) do you want the BIG-IP system to check the SMTP ports are active?"
  monitor_questions.reuse_monitor_name "Choose a monitor from the list of available monitors."

  postreq "Additional Steps"
  postreq.troubleshooting "Troubleshooting"
}
      }
      role-acl none
      run-as none
    }
  }
  description none
  requires-bigip-version-max none
  requires-bigip-version-min none
  requires-modules { ltm }
}
